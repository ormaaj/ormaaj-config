#!/usr/bin/env bash
# /etc/portage/bashrc
# Dan Douglas <ormaaj@gmail.com>

[[ $EBUILD_PHASE != setup ]] && return

# Set up the initial associative array of CFLAGS and CXXFLAGS. 
# Takes an array name to assign and optionally the names of "flag groups" to include.
# setupFlags arrname groupname [ groupname ... ]
setupFlags() {
	if [[ $FUNCNAME != "${FUNCNAME[1]}" ]]; then
		if [[ -z $1 ]]; then
			eerror "${FUNCNAME}: Must pass at least a non-empty associative array name argument."
			return 1
		else
			# Base CFLAG groups
			local -A groups=(
				[base]='(-march=native -Ofast -mmmx -pipe)'
				[graphite]='(-floop-interchange -floop-strip-mine -floop-block)'
				[debug]='(-ggdb)'
				[dragonegg]='(-fplugin=/usr/lib64/llvm/dragonegg.so -fplugin-arg-dragonegg-enable-gcc-optzns)'
			)

			local x
			for x in "${@:2}"; do
				if ${groups[$x]:+false}; then
					eerror "${FUNCNAME}: Invalid flag group name: ${x}"
					return 1
				else
					local -a "y=${groups[$x]}" 'z+=("${y[@]}")'
				fi
			done
			"$FUNCNAME" "$1" "$(printf '[%q]= ' "${z[@]}")"
		fi
	else
		unset -v x y z groups 
		eval "${1}=(${2})"
	fi
}

# runHooks "$CATEGORY" "$PN"
runHooks() {
	local x
	for x; do
		[[ $x ]] || return
	done

	# Define mappings from package names to hook functions.
	local -A categoryDefs=(
		[app-arch]='([p7zip]=noGraphite)'
		[app-shells]='([ksh]=)'
		[app-office]='([libreoffice]=plainBuild)'
		[app-text]='([aspell]=aMake112)'
		[dev-db]='([sqlite]=noFast [mysql-connector-c++]=noGraphite [mysql]=noGraphite [postgresql-base]=noFast)'
		# [dev-games]='([simgear]=noFast [openscenegraph]=noFast)'
		[dev-libs]='([protobuf]=noFast)'
		[dev-util]='([valgrind]=epuser)'
		[dev-qt]='([qtcore]=xnoFast)'
		# [games-simulation]='([flightgear]=noFast)'
		[kde-base]='([kdelibs]=noFast)'
		[media-gfx]='([digikam]=dgKamFix [rawstudio]=noFast)'
		[media-libs]='([gavl]=aMake112 [mesa]=noFast)'
		[net-analyzer]='([rrdtool]=noFast)'
		[sys-devel]='([binutils]=xdoBinutils)'
		[x11-libs]='([gtk+]=xdoGtk)'
		[www-client]='([phantomjs]=noFast [chromium]=noFast [firefox]=noGraphite)'
	) "packageDefs=${categoryDefs[$1]}"

	# If a hook is defined for the current package, run it. Otherwise setup
	# default flags. Remember if you want to use default flags as a base for a
	# hook, you must run setupFlags within the hook. This allows using
	# different default flag groups as a base per-package.
	local -A flags
	if declare -f "${packageDefs[$2]:-:}" >/dev/null 2>&1; then
		${2:+"${packageDefs[$2]:-false}"} || return
		${2:+unset -f "${packageDefs[$2]}"}
		einfo "Hook function: ${packageDefs[$2]} -- finished successfully. :)"
	else
		# Each defined key of the "flags" array will become part of CFLAGS.
		setupFlags flags base graphite || die 'setupFlags failed'
		einfo "No hook function defined for ${1}/${2} -- used default flag groups. :)"
	fi
	export C{,XX}"FLAGS=${!flags[*]}"
}

# Clean up our mess.
cleanup() {
	unset -f setupFlags runHooks main cleanup
}

main() {
	(( BASH_VERSINFO >= 4 )) || die 'bashrc requires at least Bash 4. Upgrade!'

	local -a shopts=(extglob lastpipe)
	local opt
	for opt in "${!shopts[@]}"; do
		if shopt -q "${shopts[opt]}"; then
			unset -v 'shopts[opt]'
		else
			shopt -s "${shopts[opt]}"
		fi
	done
	(( ${#shopts[@]} )) && trap 'trap RETURN; shopt -u "${shopts[@]}"' RETURN

	runHooks "$CATEGORY" "$PN" || die 'hook failed'
	einfo $'bashrc computed cflags:\n'"$(declare -p CFLAGS CXXFLAGS)"
	
	I_PROMISE_TO_SUPPLY_PATCHES_WITH_BUGS=1
	cleanup
}

#########
# All package hooks below
#########
#	setupFlags flags base graphite || return

aMake112() {
	setupFlags flags base graphite || return
	export WANT_AUTOMAKE=1.12
}

debugBuild() {
	setupFlags flags base debug || return
	unset -v 'flags[-Ofast]' 'flags[-mmmx]'
}

doGtk() {
	setupFlags flags base graphite debug || return
	COLLISION_IGNORE+=' /usr/bin/gtk-update-icon-cache /usr/lib/debug/usr/bin/gtk-update-icon-cache.debug'
}

dgKamFix() {
	setupFlags flags base graphite || return
	export MYSQL_TOOLS_PATH=/usr/share/mysql/scripts
}

doBinutils() {
	setupFlags flags base graphite || return
	export EXTRA_ECONF=--enable-gold=default
}

_doKsh() {
	setupFlags flags base graphite || return
	pre_pkg_setup() {
		local d='printf "<%s> " "${FUNCNAME[@]}"; echo; inherit flag-o-matic; trap -- DEBUG RETURN'
		local -a dcmd=( trap "$(printf %q "$d")" DEBUG )
		trap "${dcmd[*]}" RETURN
		printf "<%s> " "${FUNCNAME[@]}"; echo
	}

	pre_src_prepare() {
		append-flags "-fplugin=/usr/$(get_libdir)/llvm/dragonegg.so" -fplugin-arg-dragonegg-enable-gcc-optzns
		einfo "${FUNCNAME}: applied - $_"

		local x srcdir=/home/smorg/doc/programs/ast-open
		pushd "$srcdir"
		addwrite "$srcdir"
		git checkout 2012-05-15
		for x in **/Mamfile; do
			[[ -d ${WORKDIR}/${x%Mamfile} ]] && cp "$x" "${WORKDIR}/${x%Mamfile}"
		done

		git checkout master
		adddeny "$srcdir"
		popd
	}
}

epuser() {
	post_src_prepare() { epatch_user; }
}

noFast() {
	setupFlags flags base graphite || return
	unset -v 'flags[-Ofast]'
	flags[-O3]=
}

noGraphite() {
	setupFlags flags base || return
}

plainBuild() {
	setupFlags flags base || return
	unset -v 'flags['-{Ofast,mmmx}\]
	flags[-O2]=
}

graphiteBuilds() {
	setupFlags flags base || return
}

doChromium() {
	setupFlags flags base graphite || return
	pre_src_configure() {
		egyp() {
			replace-flags -O2 -O3
			append-flags -floop-interchange -floop-strip-mine -floop-block
			local -a cmd=( build/gyp_chromium --depth=. "$@" )
			printf '<%q> ' "${cmd[@]}" >&2
			"${cmd[@]}"
		}
	}
}

main "$@"

# mkdir /usr/lib64/bfd-plugins 
# cd /usr/lib64/bfd-plugins 
# ln -s ../llvm/LLVMgold.so /usr/lib64/bfd-plugins 
# ln -s ../llvm/libLTO.so /usr/lib64/bfd-plugins 
# ln -s ../llvm/libLLVM-3.1.so /usr/lib64/bfd-plugins 
# ln -s /usr/lib64/bfd-plugins /usr/x86_64-pc-linux-gnu/lib 
# ln -s /usr/x86_64-pc-linux-gnu/lib /usr/x86_64-pc-linux-gnu/binutils-bin/lib

# vim: set fenc=utf-8 ff=unix ft=sh :
